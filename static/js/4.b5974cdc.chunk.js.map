{"version":3,"sources":["components/form-input/form-input.jsx","components/sign-in/sign-in.jsx","components/sign-up/sign-up.jsx","pages/sign-in-sign-up/sign-in-sign-up.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["FormInput","label","handleChange","otherInputProps","className","onChange","value","length","withRouter","connect","dispatch","signInWithGoogleStart","signInWithEmailStart","emailAndPassword","history","useState","email","password","userCredentials","setUserCrendtials","adminPanel","toggleAdminPanel","event","target","name","handleSubmit","a","preventDefault","alert","push","style","display","onSubmit","type","required","onClick","google","mapStateToProps","createStructuredSelector","isLoading","Loading","error","signInFailed","signUp","userData","clearError","useEffect","displayName","confirmPassword","setUserCredentials","SignInSignUp","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/4.b5974cdc.chunk.js","sourcesContent":["import './form-input.scss'\r\n\r\nconst FormInput=({label, handleChange, ...otherInputProps})=>{\r\n    return(\r\n        <div className=\"group\">\r\n            <input className= 'form-input' onChange={handleChange} {...otherInputProps}/>\r\n            {\r\n                label? (<label className={`${otherInputProps.value.length ? 'shrink' : ''} form-label`}>{label}</label>) \r\n                : null\r\n            }           \r\n        </div>\r\n        )\r\n}\r\nexport default FormInput;","import React , { useState} from 'react';\r\nimport './sign-in.scss'\r\n//Redux\r\nimport {connect} from 'react-redux'\r\nimport {signInWithGoogleStart, signInWithEmailStart} from '../../redux/user/user.action'\r\n\r\n//Router\r\nimport {withRouter} from 'react-router-dom'\r\n//Components\r\nimport FormInput from '../form-input/form-input';\r\nimport Button from '../button/button';\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) =>({\r\n    signInWithGoogleStart: () => dispatch(signInWithGoogleStart()),\r\n    signInWithEmailStart: (emailAndPassword) => dispatch(signInWithEmailStart(emailAndPassword)),\r\n})\r\n\r\nconst SignIn = ({signInWithEmailStart,signInWithGoogleStart, history }) =>{\r\n    const [userCredentials, setUserCrendtials] = useState({email: '', password: ''})\r\n    const [adminPanel, toggleAdminPanel] = useState(false)\r\n    const {email, password} = userCredentials\r\n    const handleChange = (event) =>{\r\n        setUserCrendtials({...userCredentials, [event.target.name] : event.target.value})\r\n    }\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (email === 'admin@gmail.com' && password === 'admin') {\r\n            alert('Welcome admin')\r\n            // history.push(`/king-shopping/admin`)\r\n            history.push(`/admin`)\r\n            setUserCrendtials({ email: '', password: ''})  \r\n            return\r\n        }\r\n\r\n        signInWithEmailStart({email,password});\r\n        setUserCrendtials({ email: '', password: ''})  \r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <div className=\"sign-in\" style={adminPanel? {display: 'none'}: {display: 'flex'}}>\r\n            <h1>I already have an account!</h1>\r\n            <span className='title'>Sign In with your Email and password</span>\r\n            <form onSubmit={handleSubmit}>\r\n                <FormInput type='email' name='email' label='email' value = {email} handleChange={handleChange} required/>\r\n                <FormInput type='password'  name='password' label='password' value = {password} handleChange={handleChange}/>\r\n                <div className=\"buttons\">\r\n                    <Button type=\"submit\">SIGN IN</Button>\r\n                    <Button type='button' onClick={signInWithGoogleStart} google='true'>SIGN IN WITH GOOGLE</Button>\r\n                </div>\r\n            </form>\r\n            <span className=\"root\" onClick={()=> toggleAdminPanel(!adminPanel)}>Login as Admin</span>\r\n        </div>\r\n        <div className=\"sign-in admin\" style={adminPanel? {display: 'flex'}: {display: 'none'}}>\r\n        <h1>Welcome Admin!</h1>\r\n        <span className='title'>Sign In with your Email and password</span>\r\n        <form onSubmit={handleSubmit}>\r\n            <FormInput type='email' name='email' label='email' value = {email} handleChange={handleChange} required/>\r\n            <FormInput type='password'  name='password' label='password' value = {password} handleChange={handleChange}/>\r\n            <div className=\"buttons\">\r\n                <Button type=\"submit\">SIGN IN</Button>\r\n            </div>\r\n        </form>\r\n        <span className=\"root1\"  >For test admin use Email: admin@gmail.com Password: admin </span>\r\n        <span className=\"root\" onClick={()=> toggleAdminPanel(!adminPanel)}>Login as User</span>\r\n    </div>\r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(SignIn));","import React, { useState,useEffect } from 'react';\r\nimport './sign-up.scss'\r\n//Redux\r\nimport { connect } from 'react-redux'\r\nimport { signUp } from '../../redux/user/user.action'\r\nimport { clearError } from '../../redux/user/user.action'\r\n\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {Loading} from '../../redux/user/user.selectors'\r\nimport {signInFailed} from '../../redux/user/user.selectors'\r\n///Components\r\nimport FormInput from '../form-input/form-input'\r\nimport Button from '../button/button';\r\nimport {Spinner} from '../spinner/spinner';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isLoading: Loading,\r\n    error: signInFailed\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    signUp: (userData) => dispatch(signUp(userData)),\r\n    clearError: () => dispatch(clearError())\r\n})\r\nconst SignUp = ({ signUp,isLoading,error,clearError }) => {\r\n\r\n    useEffect(()=>{\r\n        return error? alert(error): null \r\n    },[error])\r\n    if(error)(clearError())\r\n    const [userCredentials, setUserCredentials] = useState({\r\n        displayName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    })\r\n    const { displayName, email, password, confirmPassword } = userCredentials\r\n    const handleChange = (event) => {\r\n        setUserCredentials({ ...userCredentials, [event.target.name]: event.target.value })\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (password !== confirmPassword) {\r\n            alert('Password not Matched')\r\n            return\r\n        }\r\n        signUp({ email, password, displayName });\r\n        setUserCredentials({\r\n            displayName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        })\r\n    }\r\n    return (\r\n        <div className='sign-up'>\r\n            <h2 className='title'>I do not have an account</h2>\r\n            <span>Sign up with your email and password</span>\r\n            <form className='sign-up-form' onSubmit={handleSubmit} >\r\n                <FormInput\r\n                    type='text'\r\n                    name='displayName'\r\n                    value={displayName}\r\n                    onChange={handleChange}\r\n                    label=' Name'\r\n                    required\r\n                />\r\n                <FormInput\r\n                    type='email'\r\n                    name='email'\r\n                    value={email}\r\n                    onChange={handleChange}\r\n                    label='Email'\r\n                    required\r\n                />\r\n                <FormInput\r\n                    type='password'\r\n                    name='password'\r\n                    value={password}\r\n                    onChange={handleChange}\r\n                    label='Password'\r\n                    required\r\n                />\r\n                <FormInput\r\n                    type='password'\r\n                    name='confirmPassword'\r\n                    value={confirmPassword}\r\n                    onChange={handleChange}\r\n                    label='Confirm Password'\r\n                    required\r\n                />\r\n                <Button type='submit'>SIGN UP</Button>\r\n            </form>\r\n            {isLoading? <Spinner/> :null}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\r\n","import React from 'react';\r\nimport './sign-in-sign-up.scss'\r\n//Components\r\nimport SignIn from '../../components/sign-in/sign-in'\r\nimport SignUp from '../../components/sign-up/sign-up'\r\n\r\nconst SignInSignUp = () => {\r\n    return(\r\n        <div className=\"sign-in-sign-up\">\r\n            <SignIn/>\r\n            <SignUp/>\r\n        </div>\r\n    )\r\n}\r\nexport default SignInSignUp;","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}